package BonusHandler

/*
 * Allows you to set unit bonuses to e.g. increase hp and armor for custom spells and items.
 * Mana and HP regeneration are in value per second unless IS_MANAREGEN_PERCENTAL is configured otherwise.
 * Version 1.9 - Credits: Frotty, Overkane, muzzel, Crigges, Earth-Fury, Halithor
 */
import AbilityObjEditing
import ObjectIds
import Preloader
import Icons
import ErrorHandling

/** Determines the step size in which mana regeneration can be controlled */
@configurable public constant BONUS_MANA_REGEN_STEP = 0.1
@configurable public constant MAX_BONUS_LIFE = 12
@configurable public constant MAX_BONUS_MANA = 12
@configurable public constant MAX_BONUS_DAMAGE = 10
@configurable public constant MAX_BONUS_ARMOR = 10
@configurable public constant MAX_BONUS_SIGHTRANGE = 11
@configurable public constant MAX_BONUS_LIFEREGEN = 12
@configurable public constant MAX_BONUS_MANAREGEN = 16
@configurable public constant MAX_BONUS_ATTACKSPEED = 10
@configurable public constant MAX_BONUS_STRENGTH = 10
@configurable public constant MAX_BONUS_AGILITY = 10
@configurable public constant MAX_BONUS_INTELLIGENCE = 10
@configurable public constant IS_MANAREGEN_PERCENTAL = false

int array powersOf2
int array rawShifts
int rawShiftNeg
BonusType array bonusTypes

public enum Bonus
	LIFE
	MANA
	DAMAGE
	ARMOR
	SIGHTRANGE
	LIFEREGEN
	MANAREGEN
	ATTACKSPEED
	STRENGTH
	AGILITY
	INTELLIGENCE

/** Adds to current bonus value.
  * The only fractional bonus supported is mana regeneration.
  * Other real input values are rounded to the nearest int. */
public function unit.addBonus(Bonus bonusType, real bonusValue)
	let currentBonusValue = this.getBonus(bonusType)
	if bonusType == bonusType.MANAREGEN and not IS_MANAREGEN_PERCENTAL
		let afterBonusValue = currentBonusValue + bonusValue * (1 / BONUS_MANA_REGEN_STEP)
		this.setBonus(bonusType, afterBonusValue.round())
	else
		let afterBonusValue = currentBonusValue + bonusValue
		this.setBonus(bonusType, afterBonusValue.round())

/** Sets the bonus of specified type for the unit to the given amount.
  * The only fractional bonus supported is mana regeneration.
  * Other real input values are rounded to the nearest int. */
public function unit.setBonus(Bonus bonusType, int amount)
	bonusTypes[bonusType castTo int].setBonus(this, amount)

/** Gets the current bonus value */
public function unit.getBonus(Bonus bonusType) returns int
	let bonus = bonusTypes[bonusType castTo int]
	var result = 0
	if this.hasAbility(bonus.baseRaw + rawShiftNeg)
		result -= powersOf2[bonus.maxBonus]
	for i = 0 to bonus.maxBonus - 1
		result += this.hasAbility(bonus.baseRaw + shiftRaw(i)) ? powersOf2[i] : 0
	return result

/** Sets the bonus of specified type for the unit to zero. */
public function unit.clearBonus(Bonus bonusType)
	bonusTypes[bonusType castTo int].clearBonus(this)

/** Gets the highest applicable value for the specified bonus type. */
public function Bonus.getMax() returns int
	return powersOf2[bonusTypes[this castTo int].maxBonus - 1]

/** Gets the smallest applicable value for the specified bonus type. */
public function Bonus.getMin() returns int
	return -powersOf2[bonusTypes[this castTo int].maxBonus]

/** Removes all bonuses from the specified unit. */
public function unit.clearAllBonuses()
	bonusTypes[Bonus.LIFE castTo int].clearBonus(this)
	bonusTypes[Bonus.MANA castTo int].clearBonus(this)
	bonusTypes[Bonus.DAMAGE castTo int].clearBonus(this)
	bonusTypes[Bonus.ARMOR castTo int].clearBonus(this)
	bonusTypes[Bonus.SIGHTRANGE castTo int].clearBonus(this)
	bonusTypes[Bonus.LIFEREGEN castTo int].clearBonus(this)
	bonusTypes[Bonus.MANAREGEN castTo int].clearBonus(this)
	bonusTypes[Bonus.ATTACKSPEED castTo int].clearBonus(this)
	bonusTypes[Bonus.STRENGTH castTo int].clearBonus(this)
	bonusTypes[Bonus.AGILITY castTo int].clearBonus(this)
	bonusTypes[Bonus.INTELLIGENCE castTo int].clearBonus(this)


/** Enumeration of the bonustypes. */
class BonusType
	int baseRaw
	int maxBonus

	construct(int baseRaw, int maxBonus)
		this.baseRaw = baseRaw
		this.maxBonus = maxBonus

	function setBonus(unit u, int bonus)
		if bonus >= powersOf2[maxBonus]
			error("Bonus value " + bonus.toString() + " exceeds maximum of " + powersOf2[maxBonus].toString())
			return
		if bonus < -powersOf2[maxBonus]
			error("Bonus value " + bonus.toString() + " exceeds minimum of " + (-powersOf2[maxBonus]).toString())
			return

		int val
		bool addNeg = false
		var raw = baseRaw + rawShiftNeg
		if bonus < 0
			addNeg = true
			val = bonus + powersOf2[maxBonus]
		else
			val = bonus
			u..makeAbilityPermanent(raw, false)
			..removeAbility(raw)
		for n = maxBonus-1 downto 0
			raw = baseRaw + rawShifts[n]
			if val >= powersOf2[n]
				u..addAbility(raw)
				..makeAbilityPermanent(raw, true)
				val -= powersOf2[n]
			else
				u..makeAbilityPermanent(raw, false)
				..removeAbility(raw)
		// Add negative last to avoid setting stat to <0 (killing the unit, etc)
		if addNeg
			u..addAbility(baseRaw + rawShiftNeg)
			..makeAbilityPermanent(baseRaw + rawShiftNeg, true)

	function clearBonus(unit u)
		var raw = baseRaw + rawShiftNeg
		u..makeAbilityPermanent(raw, false)
		..removeAbility(raw)
		for n = 0 to maxBonus - 1
			raw = baseRaw + rawShifts[n]
			u..makeAbilityPermanent(raw, false)
			..removeAbility(raw)


/** Example: 'XY00' + shiftRaw(15) -> 'XY15' */
function shiftRaw(int n) returns int
	if n < 10
		return n
	else
		return (n div 10) * 256 + n.moduloInt(10)


/** Example: pow2(x) -> 2^x */
function pow2(int e) returns int
	if e == 0
		return 1
	return 2 * pow2(e - 1)

function AbilityDefinition.setProperties(string suffix, string bonusName)
	this..setItemAbility(false)
	..setEditorSuffix("(" + suffix + ")")
	..setIconNormal(Icons.bTNPenguin)
	..setName("BonusHandler - " + bonusName)


init
	for n = 0 to 30 // if u need bonuses higher than 1 billion u should rethink your map design...
		powersOf2[n] = Pow(2, n.toReal()).toInt()
	for n = 0 to 30
		rawShifts[n] = shiftRaw(n)
	rawShiftNeg = '00--' - '0000'

	bonusTypes[Bonus.LIFE castTo int] = new BonusType('$L00', MAX_BONUS_LIFE)
	bonusTypes[Bonus.MANA castTo int] = new BonusType('$M00', MAX_BONUS_MANA)
	bonusTypes[Bonus.DAMAGE castTo int] = new BonusType('$D00', MAX_BONUS_DAMAGE)
	bonusTypes[Bonus.ARMOR castTo int] = new BonusType('$R00', MAX_BONUS_ARMOR)
	bonusTypes[Bonus.SIGHTRANGE castTo int] = new BonusType('$V00', MAX_BONUS_SIGHTRANGE)
	bonusTypes[Bonus.LIFEREGEN castTo int] = new BonusType('$l00', MAX_BONUS_LIFEREGEN)
	bonusTypes[Bonus.MANAREGEN castTo int] = new BonusType('$m00', MAX_BONUS_MANAREGEN)
	bonusTypes[Bonus.ATTACKSPEED castTo int] = new BonusType('$P00', MAX_BONUS_ATTACKSPEED)
	bonusTypes[Bonus.STRENGTH castTo int] = new BonusType('$S00', MAX_BONUS_STRENGTH)
	bonusTypes[Bonus.AGILITY castTo int] = new BonusType('$A00', MAX_BONUS_AGILITY)
	bonusTypes[Bonus.INTELLIGENCE castTo int] = new BonusType('$I00', MAX_BONUS_INTELLIGENCE)

	for int i = Bonus.LIFE castTo int to Bonus.INTELLIGENCE castTo int
		for int j = 0 to (bonusTypes[i].maxBonus - 1)
			preloadAbility(bonusTypes[i].baseRaw + shiftRaw(j))

@compiletime function genAbilities()
	string rawCode
	// Life:
	rawCode = "$L"
	for n = 0 to MAX_BONUS_LIFE
		string raw
		int sign = 1
		if n < MAX_BONUS_LIFE
			raw = rawCode
			if n < 10
				raw = raw + "0"
			raw = raw + (n).toString()
		else
			raw = rawCode + "--"
			sign = -1
		new AbilityDefinitionMaxLifeBonusLeast(raw.fromRawCode())
		..setMaxLifeGained(1, sign * pow2(n))
		..setProperties((sign * pow2(n)).toString(), "Life")

	// Mana:
	rawCode = "$M"
	for n = 0 to MAX_BONUS_MANA
		string raw
		int sign = 1
		if n < MAX_BONUS_MANA
			raw = rawCode
			if n < 10
				raw = raw + "0"
			raw = raw + (n).toString()
		else
			raw = rawCode + "--"
			sign = -1
		new AbilityDefinitionMaxManaBonusMost(raw.fromRawCode())
		..setMaxManaGained(1, sign * pow2(n))
		..setProperties((sign * pow2(n)).toString(), "Mana")
	// Damage:
	rawCode = "$D"
	for n = 0 to MAX_BONUS_DAMAGE
		string raw
		int sign = 1
		if n < MAX_BONUS_DAMAGE
			raw = rawCode
			if n < 10
				raw = raw + "0"
			raw = raw + (n).toString()
		else
			raw = rawCode + "--"
			sign = -1
		new AbilityDefinitionAttackBonus(raw.fromRawCode())
		..setAttackBonus(1, sign * pow2(n))
		..setProperties((sign * pow2(n)).toString(), "Damage")

	// Armor:
	rawCode = "$R"
	for n = 0 to MAX_BONUS_ARMOR
		string raw
		int sign = 1
		if n < MAX_BONUS_ARMOR
			raw = rawCode
			if n < 10
				raw = raw + "0"
			raw = raw + (n).toString()
		else
			raw = rawCode + "--"
			sign = -1
		new AbilityDefinitionDefenseBonusPlus1(raw.fromRawCode())
		..setDefenseBonus(1, sign * pow2(n))
		..setProperties((sign * pow2(n)).toString(), "Armor")

	// Sightrange:
	rawCode = "$V"
	for n = 0 to MAX_BONUS_SIGHTRANGE
		string raw
		int sign = 1
		if n < MAX_BONUS_SIGHTRANGE
			raw = rawCode
			if n < 10
				raw = raw + "0"
			raw = raw + (n).toString()
		else
			raw = rawCode + "--"
			sign = -1
		new AbilityDefinitionSightBonus(raw.fromRawCode())
		..setSightRangeBonus(1, sign * pow2(n))
		..setProperties((sign * pow2(n)).toString(), "Sightrange")

	// Liferegen:
	rawCode = "$l"
	for n = 0 to MAX_BONUS_LIFEREGEN
		string raw
		int sign = 1
		if n < MAX_BONUS_LIFEREGEN
			raw = rawCode
			if n < 10
				raw = raw + "0"
			raw = raw + (n).toString()
		else
			raw = rawCode + "--"
			sign = -1
		new AbilityDefinitionRegenLife(raw.fromRawCode())
		..setHitPointsRegeneratedPerSecond(1, sign * pow2(n))
		..setProperties((sign * pow2(n)).toString(), "Liferegen")

	// Manaregen:
	rawCode = "$m"
	for n = 0 to MAX_BONUS_MANAREGEN
		string raw
		int sign = 1
		if n < MAX_BONUS_MANAREGEN
			raw = rawCode
			if n < 10
				raw = raw + "0"
			raw = raw + (n).toString()
		else
			raw = rawCode + "--"
			sign = -1
		if IS_MANAREGEN_PERCENTAL
			new AbilityDefinitionItemRegenMana(raw.fromRawCode())
			..setManaRegenerationBonusasfractionofnormal(1, sign * pow2(n) / 100.)
			..setProperties((sign * pow2(n)).toString() + "%", "Manaregen")
		else
			new AbilityDefinitionNeutralRegenmanaonly(raw.fromRawCode())
			..setPercentage(1, false)
			..setAreaofEffect(1, 1)
			..setTargetsAllowed(1, "self")
			..setAmountRegenerated(1, sign * pow2(n) / (1. / BONUS_MANA_REGEN_STEP))
			..setRace(Race.Other)
			..setProperties((sign * pow2(n)).toString(), "Manaregen")

	// Attackspeed:
	rawCode = "$P"
	for n = 0 to MAX_BONUS_ATTACKSPEED
		string raw
		int sign = 1
		if n < MAX_BONUS_ATTACKSPEED
			raw = rawCode
			if n < 10
				raw = raw + "0"
			raw = raw + (n).toString()
		else
			raw = rawCode + "--"
			sign = -1
		new AbilityDefinitionAttackSpeedIncrease(raw.fromRawCode())
		..setAttackSpeedIncrease(1, sign * pow2(n) / 100.)
		..setProperties((sign * pow2(n)).toString() + "%", "Attackspeed")

	// Strength:
	rawCode = "$S"
	for n = 0 to MAX_BONUS_STRENGTH
		string raw
		int sign = 1
		if n < MAX_BONUS_STRENGTH
			raw = rawCode
			if n < 10
				raw = raw + "0"
			raw = raw + (n).toString()
		else
			raw = rawCode + "--"
			sign = -1
		new AbilityDefinitionStrengthBonusPlus1(raw.fromRawCode())
		..setStrengthBonus(1, sign * pow2(n))
		..setProperties((sign * pow2(n)).toString(), "Strength")

	// Agility:
	rawCode = "$A"
	for n = 0 to MAX_BONUS_AGILITY
		string raw
		int sign = 1
		if n < MAX_BONUS_AGILITY
			raw = rawCode
			if n < 10
				raw = raw + "0"
			raw = raw + (n).toString()
		else
			raw = rawCode + "--"
			sign = -1
		new AbilityDefinitionAgilityBonusPlus1(raw.fromRawCode())
		..setAgilityBonus(1, sign * pow2(n))
		..setProperties((sign * pow2(n)).toString(), "Agility")

	// Intelligence:
	rawCode = "$I"
	for n = 0 to MAX_BONUS_INTELLIGENCE
		string raw
		int sign = 1
		if n < MAX_BONUS_INTELLIGENCE
			raw = rawCode
			if n < 10
				raw = raw + "0"
			raw = raw + (n).toString()
		else
			raw = rawCode + "--"
			sign = -1
		new AbilityDefinitionIntelligenceBonusPlus1(raw.fromRawCode())
		..setIntelligenceBonus(1, sign * pow2(n))
		..setProperties((sign * pow2(n)).toString(), "Intelligence")


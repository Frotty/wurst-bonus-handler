package BonusHandler
import ObjectIdGenerator

/*
 * Allows you to set unit bonuses to e.g. increase hp and armor for custom spells and items.
 * Mana and HP regeneration are in value per second unless IS_MANAREGEN_PERCENTAL is configured otherwise.
 * Version 1.9 - Credits: Frotty, Overkane, muzzel, Crigges, Earth-Fury, Halithor
 */
import AbilityObjEditing
import Preloader
import Icons
import ErrorHandling

/** Determines the step size in which mana regeneration can be controlled */
@configurable public constant BONUS_MANA_REGEN_STEP = 0.1
@configurable public constant MAX_BONUS_LIFE = 16
@configurable public constant MAX_BONUS_MANA = 16
@configurable public constant MAX_BONUS_DAMAGE = 16
@configurable public constant MAX_BONUS_ARMOR = 16
@configurable public constant MAX_BONUS_SIGHTRANGE = 16
@configurable public constant MAX_BONUS_LIFEREGEN = 16
@configurable public constant MAX_BONUS_MANAREGEN = 16
@configurable public constant MAX_BONUS_ATTACKSPEED = 16
@configurable public constant MAX_BONUS_STRENGTH = 16
@configurable public constant MAX_BONUS_AGILITY = 16
@configurable public constant MAX_BONUS_INTELLIGENCE = 16
@configurable public constant IS_MANAREGEN_PERCENTAL = false

constant MAX_BONUS = 32

int array powersOf2
BonusType array bonusTypes

public enum Bonus
	LIFE
	MANA
	DAMAGE
	ARMOR
	SIGHTRANGE
	LIFEREGEN
	MANAREGEN
	ATTACKSPEED
	STRENGTH
	AGILITY
	INTELLIGENCE

public function Bonus.getMeasure() returns string
	switch this
		case LIFE
			return ""
		case MANA
			return ""
		case DAMAGE
			return ""
		case ARMOR
			return ""
		case SIGHTRANGE
			return ""
		case LIFEREGEN
			return " per second"
		case MANAREGEN
			return " per second"
		case ATTACKSPEED
			return "%"
		case STRENGTH
			return ""
		case AGILITY
			return ""
		case INTELLIGENCE
			return ""

public function Bonus.toString() returns string
	switch this
		case LIFE
			return "Hitpoints"
		case MANA
			return "Manapoints"
		case DAMAGE
			return "Attack Damage"
		case ARMOR
			return "Armor"
		case SIGHTRANGE
			return "Sightrange"
		case LIFEREGEN
			return "Health Regeneration"
		case MANAREGEN
			return "Mana Regeneration"
		case ATTACKSPEED
			return "Attackspeed"
		case STRENGTH
			return "Strength"
		case AGILITY
			return "Agility"
		case INTELLIGENCE
			return "Intelligence"

/** Adds to current bonus value.
  * The only fractional bonus supported is mana regeneration.
  * Other real input values are rounded to the nearest int. */
public function unit.addBonus(Bonus bonusType, real bonusValue)
	let currentBonusValue = this.getBonus(bonusType)
	if bonusType == bonusType.MANAREGEN and not IS_MANAREGEN_PERCENTAL
		let afterBonusValue = currentBonusValue + bonusValue * (1 / BONUS_MANA_REGEN_STEP)
		this.setBonus(bonusType, afterBonusValue.round())
	else
		let afterBonusValue = currentBonusValue + bonusValue
		this.setBonus(bonusType, afterBonusValue.round())

/** Sets the bonus of specified type for the unit to the given amount.
  * The only fractional bonus supported is mana regeneration.
  * Other real input values are rounded to the nearest int. */
public function unit.setBonus(Bonus bonusType, int amount)
	bonusTypes[bonusType castTo int].setBonus(this, amount)

/** Gets the current bonus value */
public function unit.getBonus(Bonus bonusType) returns int
	let bonus = bonusTypes[bonusType castTo int]
	var result = 0
	if this.hasAbility(bonus.getBonusId(bonus.maxBonus))
		result -= powersOf2[bonus.maxBonus]
	for i = 0 to bonus.maxBonus - 1
		result += this.hasAbility(bonus.getBonusId(i)) ? powersOf2[i] : 0

	return result

/** Sets the bonus of specified type for the unit to zero. */
public function unit.clearBonus(Bonus bonusType)
	bonusTypes[bonusType castTo int].clearBonus(this)

/** Gets the highest applicable value for the specified bonus type. */
public function Bonus.getMax() returns int
	return powersOf2[bonusTypes[this castTo int].maxBonus]

/** Gets the smallest applicable value for the specified bonus type. */
public function Bonus.getMin() returns int
	return -powersOf2[bonusTypes[this castTo int].maxBonus]

/** Removes all bonuses from the specified unit. */
public function unit.clearAllBonuses()
	bonusTypes[Bonus.LIFE castTo int].clearBonus(this)
	bonusTypes[Bonus.MANA castTo int].clearBonus(this)
	bonusTypes[Bonus.DAMAGE castTo int].clearBonus(this)
	bonusTypes[Bonus.ARMOR castTo int].clearBonus(this)
	bonusTypes[Bonus.SIGHTRANGE castTo int].clearBonus(this)
	bonusTypes[Bonus.LIFEREGEN castTo int].clearBonus(this)
	bonusTypes[Bonus.MANAREGEN castTo int].clearBonus(this)
	bonusTypes[Bonus.ATTACKSPEED castTo int].clearBonus(this)
	bonusTypes[Bonus.STRENGTH castTo int].clearBonus(this)
	bonusTypes[Bonus.AGILITY castTo int].clearBonus(this)
	bonusTypes[Bonus.INTELLIGENCE castTo int].clearBonus(this)



int array bonusIds
/** Enumeration of the bonustypes. */
class BonusType
	int startOffset
	int maxBonus


	construct(int startOffset, IdGenerator generator, int maxBonus)
		this.startOffset = startOffset
		this.maxBonus = maxBonus

		for i = 0 to maxBonus
			bonusIds[startOffset + i] = generator.next()


	function getBonusId(int count) returns int
		return bonusIds[startOffset + count]



	function setBonus(unit u, int bonus)
		if bonus >= powersOf2[maxBonus]
			error("Bonus value " + bonus.toString() + " exceeds maximum of " + powersOf2[maxBonus].toString())
			return
		if bonus < -powersOf2[maxBonus]
			error("Bonus value " + bonus.toString() + " exceeds minimum of " + (-powersOf2[maxBonus]).toString())
			return

		var val = bonus
		if bonus < 0
			val = -powersOf2[maxBonus]
			for n = maxBonus - 1 downto 0
				let id = getBonusId(n)
				if val + powersOf2[n] <= bonus
					u..addAbility(id)
					..makeAbilityPermanent(id, true)
					val += powersOf2[n]
				else
					u..makeAbilityPermanent(id, false)
					..removeAbility(id)

			// Add negative last to avoid setting stat to <0 (killing the unit, etc)
			u..addAbility(getBonusId(maxBonus))
			..makeAbilityPermanent(getBonusId(maxBonus), true)
		else
			u..makeAbilityPermanent(getBonusId(maxBonus), false)
			..removeAbility(getBonusId(maxBonus))
			for n = maxBonus - 1 downto 0
				let id = getBonusId(n)
				if val >= powersOf2[n]
					u..addAbility(id)
					..makeAbilityPermanent(id, true)
					val -= powersOf2[n]
				else
					u..makeAbilityPermanent(id, false)
					..removeAbility(id)


	function clearBonus(unit u)
		var raw = getBonusId(maxBonus)
		u..makeAbilityPermanent(raw, false)
		..removeAbility(raw)
		for n = 0 to maxBonus - 1
			raw = getBonusId(n)
			u..makeAbilityPermanent(raw, false)
			..removeAbility(raw)


/** Example: pow2(x) -> 2^x */
function pow2(int e) returns int
	if e == 0
		return 1
	return 2 * pow2(e - 1)

function AbilityDefinition.setProperties(string suffix, string bonusName)
	this..setItemAbility(false)
	..setEditorSuffix("(" + suffix + ")")
	..setIconNormal(Icons.bTNPenguin)
	..setName("BonusHandler - " + bonusName)


init
	for n = 0 to 30 // if u need bonuses higher than 1 billion u should rethink your map design...
		powersOf2[n] = Pow(2, n.toReal()).toInt()

	let generator = new IdGenerator('$L00')
	var offset = 0

	bonusTypes[Bonus.LIFE castTo int] = new BonusType(offset, generator, MAX_BONUS_LIFE)
	offset += MAX_BONUS_LIFE + 1
	bonusTypes[Bonus.MANA castTo int] = new BonusType(offset, generator, MAX_BONUS_MANA)
	offset += MAX_BONUS_MANA + 1
	bonusTypes[Bonus.DAMAGE castTo int] = new BonusType(offset, generator, MAX_BONUS_DAMAGE)
	offset += MAX_BONUS_DAMAGE + 1
	bonusTypes[Bonus.ARMOR castTo int] = new BonusType(offset, generator, MAX_BONUS_ARMOR)
	offset += MAX_BONUS_ARMOR + 1
	bonusTypes[Bonus.SIGHTRANGE castTo int] = new BonusType(offset, generator, MAX_BONUS_SIGHTRANGE)
	offset += MAX_BONUS_SIGHTRANGE + 1
	bonusTypes[Bonus.LIFEREGEN castTo int] = new BonusType(offset, generator, MAX_BONUS_LIFEREGEN)
	offset += MAX_BONUS_LIFEREGEN + 1
	bonusTypes[Bonus.MANAREGEN castTo int] = new BonusType(offset, generator, MAX_BONUS_MANAREGEN)
	offset += MAX_BONUS_MANAREGEN + 1
	bonusTypes[Bonus.ATTACKSPEED castTo int] = new BonusType(offset, generator, MAX_BONUS_ATTACKSPEED)
	offset += MAX_BONUS_ATTACKSPEED + 1
	bonusTypes[Bonus.STRENGTH castTo int] = new BonusType(offset, generator, MAX_BONUS_STRENGTH)
	offset += MAX_BONUS_STRENGTH + 1
	bonusTypes[Bonus.AGILITY castTo int] = new BonusType(offset, generator, MAX_BONUS_AGILITY)
	offset += MAX_BONUS_AGILITY + 1
	bonusTypes[Bonus.INTELLIGENCE castTo int] = new BonusType(offset, generator, MAX_BONUS_INTELLIGENCE)

	for int i = Bonus.LIFE castTo int to Bonus.INTELLIGENCE castTo int
		for int j = 0 to (bonusTypes[i].maxBonus - 1)
			preloadAbility(bonusTypes[i].getBonusId(j))

@compiletime function genAbilities()
	let generator = new IdGenerator('$L00')
	// Life:
	for n = 0 to MAX_BONUS_LIFE
		var sign = 1
		if n >= MAX_BONUS_LIFE
			sign = -1

		let val = sign * pow2(n)
		new AbilityDefinitionMaxLifeBonusLeast(generator.next())
		..setMaxLifeGained(1, val)
		..setProperties(val.toString(), "Life")

	// Mana:
	for n = 0 to MAX_BONUS_MANA
		var sign = 1
		if n >= MAX_BONUS_MANA
			sign = -1

		let val = sign * pow2(n)
		new AbilityDefinitionMaxManaBonusMost(generator.next())
		..setMaxManaGained(1, val)
		..setProperties(val.toString(), "Mana")

	// Damage:
	for n = 0 to MAX_BONUS_DAMAGE
		var sign = 1
		if n >= MAX_BONUS_DAMAGE
			sign = -1

		let val = sign * pow2(n)
		new AbilityDefinitionAttackBonus(generator.next())
		..setAttackBonus(1, val)
		..setProperties(val.toString(), "Damage")

	// Armor:
	for n = 0 to MAX_BONUS_ARMOR
		var sign = 1
		if n >= MAX_BONUS_ARMOR
			sign = -1

		let val = sign * pow2(n)
		new AbilityDefinitionDefenseBonusPlus1(generator.next())
		..setDefenseBonus(1, val)
		..setProperties(val.toString(), "Armor")

	// Sightrange:
	for n = 0 to MAX_BONUS_SIGHTRANGE
		var sign = 1
		if n >= MAX_BONUS_SIGHTRANGE
			sign = -1

		let val = sign * pow2(n)
		new AbilityDefinitionSightBonus(generator.next())
		..setSightRangeBonus(1, val)
		..setProperties(val.toString(), "Sightrange")

	// Liferegen:
	for n = 0 to MAX_BONUS_LIFEREGEN
		var sign = 1
		if n >= MAX_BONUS_LIFEREGEN
			sign = -1

		let val = sign * pow2(n)
		new AbilityDefinitionRegenLife(generator.next())
		..setHitPointsRegeneratedPerSecond(1, val)
		..setProperties(val.toString(), "Liferegen")

	// Manaregen:
	for n = 0 to MAX_BONUS_MANAREGEN
		var sign = 1
		if n >= MAX_BONUS_MANAREGEN
			sign = -1

		let val = sign * pow2(n)
		if IS_MANAREGEN_PERCENTAL
			new AbilityDefinitionItemRegenMana(generator.next())
			..setManaRegenerationBonusasfractionofnormal(1, val / 100.)
			..setProperties(val.toString() + "%", "Manaregen")
		else
			new AbilityDefinitionNeutralRegenmanaonly(generator.next())
			..setPercentage(1, false)
			..setAreaofEffect(1, 1)
			..setTargetsAllowed(1, "self")
			..setAmountRegenerated(1, val / (1. / BONUS_MANA_REGEN_STEP))
			..setRace(Race.Other)
			..setProperties(val.toString(), "Manaregen")

	// Attackspeed:
	for n = 0 to MAX_BONUS_ATTACKSPEED
		var sign = 1
		if n >= MAX_BONUS_ATTACKSPEED
			sign = -1

		let val = sign * pow2(n)
		new AbilityDefinitionAttackSpeedIncrease(generator.next())
		..setAttackSpeedIncrease(1, val / 100.)
		..setProperties(val.toString() + "%", "Attackspeed")

	// Strength:
	for n = 0 to MAX_BONUS_STRENGTH
		var sign = 1
		if n >= MAX_BONUS_STRENGTH
			sign = -1

		let val = sign * pow2(n)
		new AbilityDefinitionStrengthBonusPlus1(generator.next())
		..setStrengthBonus(1, val)
		..setProperties(val.toString(), "Strength")

	// Agility:
	for n = 0 to MAX_BONUS_AGILITY
		var sign = 1
		if n >= MAX_BONUS_AGILITY
			sign = -1

		let val = sign * pow2(n)
		new AbilityDefinitionAgilityBonusPlus1(generator.next())
		..setAgilityBonus(1, val)
		..setProperties(val.toString(), "Agility")

	// Intelligence:
	for n = 0 to MAX_BONUS_INTELLIGENCE
		var sign = 1
		if n >= MAX_BONUS_INTELLIGENCE
			sign = -1

		let val = sign * pow2(n)
		new AbilityDefinitionIntelligenceBonusPlus1(generator.next())
		..setIntelligenceBonus(1, val)
		..setProperties(val.toString(), "Intelligence")

